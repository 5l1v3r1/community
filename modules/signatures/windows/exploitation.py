# Copyright (C) 2016 Cuckoo Foundation.
# This file is part of Cuckoo Sandbox - http://www.cuckoosandbox.org
# See the file 'docs/LICENSE' for copying permission.

from lib.cuckoo.common.abstracts import Signature

class ExploitHeapspray(Signature):
    name = "exploit_heapspray"
    description = "A potential heapspray has been detected"
    severity = 3
    categories = ["exploit"]
    authors = ["Cuckoo Technologies", "Kevin Ross"]
    minimum = "2.0"
    references = ["https://www.corelan.be/index.php/2011/12/31/exploit-writing-tutorial-part-11-heap-spraying-demystified/"]

    filter_apinames = "NtAllocateVirtualMemory",

    def init(self):
        self.mem = {}
        self.prot = {}
        self.heaptotals = dict()
        self.ignore = False
        if self.get_results("target", {}).get("category") == "file":
            if "PE32 executable" in self.get_results("target", {})["file"]["type"]:
                self.ignore = True

    def on_call(self, call, process):
        pname = process["process_name"]
        pid = call["arguments"]["process_identifier"]
        protection = call["arguments"]["protection"]
        alloc_type = call["arguments"]["allocation_type"]
        region_size = call["arguments"]["region_size"]
        allocation_typefull = call["flags"].get("allocation_type")

        if "MEM_COMMIT" in allocation_typefull:
            combo = pname, pid, region_size, protection, alloc_type
            self.mem[combo] = self.mem.get(combo, 0) + 1
            self.prot[protection] = call["flags"].get("protection")

    def on_complete(self):
        if not self.ignore:
            for combo, count in self.mem.items():
                pname, pid, region_size, protection, alloc_type = combo

                if count >= 50:
                    written = int(region_size) * int(count)/1024/1024
                    if written >= 50:
                        if pname not in self.heaptotals:
                            self.heaptotals[pname] = 0
                        self.heaptotals[pname] += written                    
                        self.mark(
                            process=pname,
                            name="heapspray",
                            protection=self.prot.get(protection, protection),
                            count=count,
                            length=region_size,
                            total_mb=written,
                        )

            if len(self.heaptotals) > 0:  
                for pname, total in self.heaptotals.items():
                    if "sprayed onto the heap of the" in self.description:
                        self.description += " and %d megabytes onto the heap of the %s process" % (total, pname)
                    else:
                        self.description += ". %d megabytes was sprayed onto the heap of the %s process" % (total, pname)
                    if total > 1024:
                        self.severity = 6
                    elif total > 512:
                        self.severity = 5
                    elif total > 256:
                        self.severity = 4
                     
        return self.has_marks()
